import { useCallback, useEffect, useState } from 'react';
import { FilePond, registerPlugin } from 'react-filepond';
import toast from 'react-hot-toast';
import { useQuery } from 'react-query';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  ExpandLess as ExpandLessIcon,
  ExpandMore as ExpandMoreIcon,
  GetApp as DownloadIcon,
  Tune as TuneIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon
} from '@mui/icons-material';
import {
  Box,
  Button,
  CircularProgress,
  Collapse,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  FormControl,
  IconButton,
  InputAdornment,
  InputLabel,
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  OutlinedInput,
  Stack,
  Typography
} from '@mui/material';
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import axios from 'axios';
import FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSession } from 'next-auth/react';

import Layout from '@/src/components/layout';

import 'filepond/dist/filepond.min.css';

registerPlugin(FilePondPluginFileValidateType);
export default function SequencesPage() {
  const [files, setFiles] = useState<any[]>([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [userHasVerified, setUserHasVerified] = useState(false);
  const [openMenuTable, setOpenMenuTable] = useState(false);

  const router = useRouter();
  const { data: client } = useSession();
  const { isLoading, error, data, refetch } = useQuery(
    'inventories',
    () =>
      fetch('/api/sequences/list', {
        method: 'GET',
        headers: {
          id: client?.user.id as string
        }
      }).then(res => res.json()),
    {
      enabled: !!client?.user.id
    }
  );

  const columns: GridColDef[] = [
    { field: 'id', headerName: 'ID' },
    { field: 'partNumber', headerName: 'Part Number', width: 200 },
    {
      field: 'buildSequence',
      headerName: 'Build Sequence',
      width: 150
    },
    {
      field: 'quantity',
      headerName: 'Quantity'
    },
    {
      field: 'poNo',
      headerName: 'Po. No.'
    },
    {
      field: 'vendorNo',
      headerName: 'Vendor No.',
      width: 100
    },
    {
      field: 'packingDiskNo',
      headerName: 'Packing Disk No.',
      width: 150
    },
    {
      field: 'line',
      headerName: 'Line'
    },
    {
      field: 'scannedBy',
      headerName: 'Scanned By'
    }
  ];

  const handleExport = () => {
    toast.loading('Descargando reporte...');
    axios('/api/sequences/export', {
      responseType: 'blob',
      headers: {
        id: client?.user.id as string
      }
    })
      .then(res => {
        const file = window.URL.createObjectURL(res.data);
        window.location.assign(file);
        toast.dismiss();
        toast.success('Reporte descargado');
      })
      .catch(() => toast.error('Ha ocurrido un error al descargar el reporte'));
  };

  const handleAdd = () => {
    router.push('/sequences/add');
  };

  const handleDrop = () => {
    setOpenDialog(false);
    axios('/api/users/verify', {
      headers: {
        id: client?.user.id as string,
        password: password
      }
    })
      .then(() => {
        toast.success('Usuario verificado');
        setUserHasVerified(true);
      })
      .catch(() => {
        toast.error('Contraseña incorrecta');
        setUserHasVerified(false);
      })
      .finally(() => {
        setPassword('');
        handleDialog();
      });
  };

  const handleMenuTable = () => {
    setOpenMenuTable(!openMenuTable);
  };

  const handleDialog = useCallback(() => {
    setOpenDialog(!openDialog);
  }, [openDialog]);

  useEffect(() => {
    if (userHasVerified) {
      toast.loading('Limpiando listado...');
      axios('/api/sequences/truncate', {
        headers: {
          id: client?.user.id as string,
          password: password
        }
      })
        .then(() => {
          toast.success('Listado limpiado');
        })
        .catch(() => {
          toast.error('Ha ocurrido un error al limpiar el listado');
        })
        .finally(() => {
          setUserHasVerified(false);
          toast.dismiss();
          refetch();
        });
    }
  }, [client?.user.id, handleDialog, password, refetch, userHasVerified]);

  return (
    <Layout>
      <Head>
        <title>Secuencias</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Typography variant="h4" gutterBottom>
        Secuencias
      </Typography>
      <Typography variant="body1" gutterBottom>
        En esta sección podrás ver el listado de secuencias que se han
        escaneado.
      </Typography>
      <Stack
        direction={{ xs: 'column', sm: 'row' }}
        justifyContent="space-between"
        alignItems="center"
        my={3}
      >
        <Typography
          variant="h5"
          gutterBottom
          fontWeight="400"
          textAlign="center"
        >
          Total de secuencias: {data?.stack?.length || 0}
        </Typography>
        <Box display="flex" gap={2}>
          <Button
            variant="outlined"
            endIcon={<DownloadIcon />}
            disabled={isLoading || !data?.stack?.length}
            onClick={handleExport}
          >
            Descargar reporte
          </Button>
          <Button
            variant="outlined"
            color="error"
            startIcon={<DeleteIcon />}
            disabled={isLoading || !data?.stack?.length}
            onClick={handleDialog}
          >
            Limpiar listado
          </Button>
        </Box>
      </Stack>
      <Box my={3}>
        <FilePond
          dropOnPage
          files={files}
          onupdatefiles={setFiles}
          allowMultiple={false}
          maxFiles={1}
          disabled={isLoading}
          acceptedFileTypes={['application/vnd.ms-excel', 'text/csv', '.csv']}
          name="files"
          labelIdle='Arrastra y suelta tu archivo o <span class="filepond--label-action">buscar</span>'
          server={{
            url: '/api/sequences/import',
            headers: {
              id: client?.user.id as string
            }
          }}
          onprocessfile={(err, _) => {
            if (err) {
              toast.error('Ha ocurrido un error al importar el archivo');
            } else {
              toast.success('Archivo importado');
              refetch();
            }
          }}
        />
      </Box>
      {data?.stack?.length > 0 && (
        <List aria-labelledby="nested-list-subheader" sx={{ mt: 3, mb: 2 }}>
          <ListItemButton onClick={handleMenuTable}>
            <ListItemIcon>
              <TuneIcon />
            </ListItemIcon>
            <ListItemText primary="Opciones" />
            {openMenuTable ? <ExpandLessIcon /> : <ExpandMoreIcon />}
          </ListItemButton>
          <Collapse in={openMenuTable} timeout="auto" unmountOnExit>
            <List component="div" disablePadding>
              <ListItemButton sx={{ pl: 4 }} onClick={handleAdd}>
                <ListItemIcon>
                  <AddIcon />
                </ListItemIcon>
                <ListItemText primary="Añadir nueva secuencia" />
              </ListItemButton>
            </List>
          </Collapse>
        </List>
      )}
      {isLoading && (
        <Stack gap={2}>
          <Typography variant="h5" gutterBottom>
            Cargando datos...
          </Typography>
          <CircularProgress color="secondary" />
        </Stack>
      )}
      {!isLoading && Boolean(error) && (
        <Stack>
          <Typography>
            Ha ocurrido un error al cargar los datos, por favor intenta de
            nuevo.
          </Typography>
        </Stack>
      )}
      {!isLoading && (
        <DataGrid
          autoHeight
          rows={data?.stack ?? []}
          columns={columns}
          components={{
            NoRowsOverlay: () => (
              <Stack height="100%" alignItems="center" justifyContent="center">
                No hay datos para mostrar
              </Stack>
            ),
            NoResultsOverlay: () => (
              <Stack height="100%" alignItems="center" justifyContent="center">
                No hay resultados para mostrar
              </Stack>
            )
          }}
        />
      )}
      <Dialog open={openDialog} onClose={handleDialog}>
        <DialogTitle>Mensaje</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Para poder eliminar el listado de secuencias, por favor ingresa tu
            contraseña.
          </DialogContentText>
          <FormControl fullWidth focused variant="outlined" sx={{ mt: 3 }}>
            <InputLabel htmlFor="outlined-adornment-password">
              Contraseña
            </InputLabel>
            <OutlinedInput
              autoFocus
              fullWidth
              margin="dense"
              label="Contraseña"
              value={password}
              onChange={e => setPassword(e.target.value)}
              id="outlined-adornment-password"
              type={showPassword ? 'text' : 'password'}
              endAdornment={
                <InputAdornment position="end">
                  <IconButton
                    aria-label="toggle password visibility"
                    onClick={() => setShowPassword(!showPassword)}
                    onMouseDown={e => e.preventDefault()}
                    edge="end"
                  >
                    {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                  </IconButton>
                </InputAdornment>
              }
            />
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDialog}>Cancelar</Button>
          <Button
            color="error"
            onClick={handleDrop}
            disabled={!password.length}
          >
            Confirmar
          </Button>
        </DialogActions>
      </Dialog>
    </Layout>
  );
}
