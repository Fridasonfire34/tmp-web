import { useState } from 'react';
import { SubmitHandler, useForm } from 'react-hook-form';
import { toast } from 'react-hot-toast';
import {
  Button,
  Card,
  CardActions,
  CardContent,
  CardHeader,
  Stack,
  TextField,
  Typography
} from '@mui/material';
import axios from 'axios';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSession } from 'next-auth/react';

import Layout from '@/src/components/layout';

type Inputs = {
  partNumber: string;
  buildSequence: string;
  vendorNo: string;
  packingDiskNo: string;
  line: string;
  poNo: string;
  quantity: string;
  scannedBy: string;
};

export default function SequencesAddPage() {
  const [loading, setLoading] = useState(false);

  const { data: client } = useSession();
  const router = useRouter();
  const { week } = router.query;

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<Inputs>();

  const onSubmit: SubmitHandler<Inputs> = data => {
    setLoading(true);
    axios('/api/sequences/add', {
      method: 'POST',
      headers: {
        id: client?.user.id as string,
        week: week as string
      },
      data
    })
      .then(() => {
        toast.success('Pieza añadida correctamente');
        router.back();
      })
      .catch(() => {
        toast.error('Ha ocurrido un error al añadir la pieza');
      })
      .finally(() => {
        setLoading(false);
      });
  };

  return (
    <Layout>
      <Head>
        <title>Añadir Pieza</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Typography variant="h4" gutterBottom>
        Añadir pieza
      </Typography>
      <Typography variant="body1" gutterBottom>
        En esta sección se añade una nueva pieza.
      </Typography>
      <Stack direction="column" my={3}>
        <form onSubmit={handleSubmit(onSubmit)}>
          <Card>
            <CardHeader title="Datos de la pieza" />
            <CardContent
              sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}
            >
              <TextField
                fullWidth
                label="Part Number"
                {...register('partNumber', {
                  required: 'El Part Number es requerido'
                })}
                error={!!errors.partNumber}
                helperText={errors.partNumber?.message}
              />
              <TextField
                fullWidth
                label="Build Sequence"
                {...register('buildSequence', {
                  required: 'Build Sequence es requerido'
                })}
                error={!!errors.buildSequence}
                helperText={errors.buildSequence?.message}
              />
              <TextField
                fullWidth
                label="Vendor No."
                {...register('vendorNo', {
                  required: 'Vendor No. es requerido'
                })}
                error={!!errors.vendorNo}
                helperText={errors.vendorNo?.message}
              />
              <TextField
                fullWidth
                label="Packing Disk No."
                {...register('packingDiskNo', {
                  required: 'Packing Disk No. es requerido'
                })}
                error={!!errors.packingDiskNo}
                helperText={errors.packingDiskNo?.message}
              />
              <TextField
                fullWidth
                label="Line"
                {...register('line', {
                  required: 'Line es requerido'
                })}
                error={!!errors.line}
                helperText={errors.line?.message}
              />
              <TextField
                fullWidth
                label="PO No."
                {...register('poNo', {
                  required: 'PO No. es requerido'
                })}
                error={!!errors.poNo}
                helperText={errors.poNo?.message}
              />
              <TextField
                fullWidth
                label="Quantity"
                {...register('quantity', {
                  required: 'Quantity es requerido'
                })}
                error={!!errors.quantity}
                helperText={errors.quantity?.message}
              />
            </CardContent>
            <CardActions>
              <Button
                color="error"
                fullWidth
                disabled={loading}
                onClick={() => router.back()}
              >
                Cancelar
              </Button>
              <Button fullWidth disabled={loading} type="submit">
                Añadir
              </Button>
            </CardActions>
          </Card>
        </form>
      </Stack>
    </Layout>
  );
}
