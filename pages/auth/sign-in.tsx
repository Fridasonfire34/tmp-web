import { useState } from 'react';
import { SubmitHandler, useForm } from 'react-hook-form';
import toast, { Toaster } from 'react-hot-toast';
import {
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon
} from '@mui/icons-material';
import { LoadingButton } from '@mui/lab';
import {
  Container,
  IconButton,
  Stack,
  TextField,
  Typography
} from '@mui/material';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { signIn, SignInResponse } from 'next-auth/react';

type Inputs = {
  email: string;
  password: string;
};

export default function SignInPage() {
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const router = useRouter();

  const handleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<Inputs>();

  const onSubmit: SubmitHandler<Inputs> = data => {
    const { email, password } = data;
    setLoading(true);
    signIn('credentials', {
      email,
      password: password,
      redirect: false
    })
      .then(res => {
        const { ok, error } = res as SignInResponse;
        if (ok) {
          toast.success('Bienvenido');
          router.push('/');
        } else {
          toast.error(error as string);
        }
      })
      .finally(() => setLoading(false));
  };

  return (
    <Container>
      <Head>
        <title>Iniciar sesión</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Typography variant="h2">Iniciar sesión</Typography>
      <form onSubmit={handleSubmit(onSubmit)}>
        <Stack gap={2} my={3}>
          <TextField
            placeholder="Correo electrónico"
            {...register('email', {
              required: 'El correo electrónico es inválido',
              pattern: {
                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                message: 'El correo electrónico es inválido'
              }
            })}
            error={!!errors.email}
            helperText={errors.email?.message}
          />
          <Stack direction="row" alignItems="center" gap={2}>
            <TextField
              fullWidth
              type={showPassword ? 'text' : 'password'}
              placeholder="Contraseña"
              {...register('password', {
                required: 'La contraseña es inválida',
                minLength: {
                  value: 6,
                  message: 'La contraseña debe incluir 6 caracteres'
                }
              })}
              error={!!errors.password}
              helperText={errors.password?.message}
            />
            {showPassword ? (
              <IconButton onClick={handleShowPassword}>
                <VisibilityIcon />
              </IconButton>
            ) : (
              <IconButton onClick={handleShowPassword}>
                <VisibilityOffIcon />
              </IconButton>
            )}
          </Stack>
          <LoadingButton
            loading={loading}
            variant="contained"
            size="large"
            type="submit"
          >
            Iniciar sesión
          </LoadingButton>
        </Stack>
      </form>
      <Toaster position="top-right" />
    </Container>
  );
}
