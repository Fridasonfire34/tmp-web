import { useState } from 'react';
import { SubmitHandler, useForm } from 'react-hook-form';
import toast, { Toaster } from 'react-hot-toast';
import {
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon
} from '@mui/icons-material';
import { LoadingButton } from '@mui/lab';
import {
  Box,
  Card,
  CardContent,
  Container,
  FormControl,
  FormHelperText,
  IconButton,
  InputAdornment,
  InputLabel,
  OutlinedInput,
  Stack,
  TextField,
  Typography
} from '@mui/material';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { signIn, SignInResponse } from 'next-auth/react';

type Inputs = {
  employeeId: string;
  password: string;
};

export default function SignInPage() {
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const router = useRouter();

  const handleClickShowPassword = () => {
    setShowPassword(show => !show);
  };

  const handleMouseDownPassword = (
    event: React.MouseEvent<HTMLButtonElement>
  ) => {
    event.preventDefault();
  };
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<Inputs>();

  const onSubmit: SubmitHandler<Inputs> = data => {
    const { employeeId, password } = data;
    setLoading(true);
    signIn('credentials', {
      employeeId,
      password,
      redirect: false
    })
      .then(res => {
        const { ok, error } = res as SignInResponse;
        if (ok) {
          toast.success('Bienvenido');
          router.push('/');
        } else {
          toast.error(error as string);
        }
      })
      .finally(() => setLoading(false));
  };

  return (
    <Container>
      <Head>
        <title>Iniciar sesión</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          minHeight: '100vh',
          width: '100%'
        }}
      >
        <Card
          sx={{
            width: '100%'
          }}
        >
          <CardContent>
            <Stack spacing={2}>
              <Typography variant="h4">Inicio de sesión</Typography>
              <Typography variant="body2" color="textSecondary">
                Inicia sesión con tu número de empleado y contraseña
              </Typography>
            </Stack>
            <form onSubmit={handleSubmit(onSubmit)}>
              <Stack gap={2} my={3}>
                <TextField
                  label="No. de empleado"
                  {...register('employeeId', {
                    required: 'El número de empleado es requerido'
                  })}
                  error={!!errors.employeeId}
                  helperText={errors.employeeId?.message}
                />
                <FormControl variant="outlined" error={!!errors.password}>
                  <InputLabel htmlFor="outlined-adornment-password">
                    Contraseña
                  </InputLabel>
                  <OutlinedInput
                    id="outlined-adornment-password"
                    type={showPassword ? 'text' : 'password'}
                    endAdornment={
                      <InputAdornment position="end">
                        <IconButton
                          aria-label="toggle password visibility"
                          onClick={handleClickShowPassword}
                          onMouseDown={handleMouseDownPassword}
                          edge="end"
                        >
                          {showPassword ? (
                            <VisibilityOffIcon />
                          ) : (
                            <VisibilityIcon />
                          )}
                        </IconButton>
                      </InputAdornment>
                    }
                    label="Password"
                    fullWidth
                    placeholder="Contraseña"
                    {...register('password', {
                      required: 'La contraseña es inválida',
                      minLength: {
                        value: 6,
                        message: 'La contraseña debe incluir 6 caracteres'
                      }
                    })}
                    error={!!errors.password}
                  />
                  <FormHelperText>{errors.password?.message}</FormHelperText>
                </FormControl>
                <LoadingButton
                  loading={loading}
                  variant="contained"
                  size="large"
                  type="submit"
                >
                  Iniciar sesión
                </LoadingButton>
              </Stack>
            </form>
          </CardContent>
        </Card>
      </Box>
      <Toaster position="top-right" />
    </Container>
  );
}
